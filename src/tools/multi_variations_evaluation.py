import os
import sys
import base64
import json
from subprocess32 import check_output
from tqdm import tqdm
import random
from collections import defaultdict
import itertools
import re


def read_files(dir_path):
    """This function reads the unique fake file names. 

    :param dir_path: the fingerprints directory path.
    :return: Returns None.
    """

    files = os.listdir(dir_path)
    unique_files = []
    # Read all the files
    for index, fp_image_file in enumerate(files):
        if fp_image_file.endswith("fake_B.png"):
            len1 = len(fp_image_file)
            len2 = len(fp_image_file[-10:])
            len3 = len1 - len2
            unique_files.append(fp_image_file[:len3])
    
    return unique_files


def read_files_split_into_groups(dir_path):
    """This function separates into groups by second underscore. 

    :param dir_path: the fingerprints directory path.
    :return: Returns all groups.
    """
    
    groups = defaultdict(list)
    files = read_files(dir_path)

    groups =  [list(g) for _, g in itertools.groupby(sorted(files), lambda x: x[0:[m.start() for m in re.finditer(r"_",x)][1]])]

    return groups



def evaluate_with_verifinger(dir_path, fingerprints_list):
    """This function does the evaluation with verifinger. 

    :param dir_path: the fingerprints directory path.
    :param fingerprints_list: all fingerprints at class level.
    :return: Returns matching scores.
    """

    score36 = 0
    score48 = 0
    score60 = 0
    count = 0

    # Loop over each class
    for ind, fing_class in enumerate(tqdm(fingerprints_list, desc='Class Loop')):
      # Loop over each variation
      for sub_ind, variation in enumerate(tqdm(fing_class, desc='Variation Loop')):
        try:
            # print(" Processing Class: ", ind,"/",len(fingerprints_list), " and variation: ", variation)
            class_copy = fing_class.copy()
            # get remove current variation
            class_copy.remove(variation)

            # get all the verifinger execution in a list
            verifinger_list = ['Verifinger1toN']
            real_image_Path = dir_path + '/' + variation + 'real_B.png'
            verifinger_list.append(real_image_Path)
            fake_images_path = [dir_path + '/' + s + 'fake_B.png' for s in class_copy]
            verifinger_list = verifinger_list + fake_images_path

            # update the counter.
            count = count + len(class_copy)

            # Use this in SSH
            output = check_output( verifinger_list, timeout=60 )
            lines = output.split(b'\n')

            # Process the output of verifinger
            for line in lines:
              split_line = line.split(b';')
              if len(split_line) > 0 and '/vol1/itsec_1' in split_line[0].decode("utf-8"):
                score = int(split_line[2].decode("utf-8"))
            
            
                if score >= 36:
                  score36 = score36 + 1
                
                if score >= 48:
                  score48 = score48 + 1

                if score >= 60:
                  score60 = score60 + 1

        except Exception as ex:
            template = "An exception of type {0} occurred at first try block. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print(message)
            continue
    return (score36, score48, score60, count)

def main():

    if ( len(sys.argv) < 2 ):
        print('Usage: python '+sys.argv[0]+ ' <input_dir>')
        print('\t input_dir: this folder should include all the images generated by gan')
        sys.exit(0)

    # parse command line parameters
    input_dir =  sys.argv[1]

    # get the unique classes
    all_files = read_files_split_into_groups(input_dir)

    # call the evaluation function
    (score36, score48, score60, count) = evaluate_with_verifinger(input_dir, all_files)

    print("Evaluation total images: ", count)
    print("Evaluation images that didn't met the any criteria: ", count - score36)
    print("Score 36: ", score36, " images passed")
    print("Score 48: ", score48, " images passed")
    print("Score 60: ", score60, " images passed")


if __name__ == '__main__':
    main()